DCEIPB | SA2506031 

Start Date : 12th July 2025

Module 1 : AWS Cloud Platform :

#######################
Day 1 : 12th July 2025
#######################

	- Introduction to Cloud!
	
	- AWS Cloud Platform Services :
	
	- Access AWS Cloud :
	
	- AWS Operations :
	
		- Region 
		
		- Computing Environments 
		
		- IAM 
		
		- User and Resources 
		
		
	https://aws.amazon.com/certification/?ams%23interactive-card-vertical%23pattern-data.filter=%257B%2522filters%2522%253A%255B%255D%257D
	
	https://d1.awsstatic.com/training-and-certification/docs/AWS_certification_paths.pdf
	
	
	Access AWS Cloud ! 
	
		- Create AWS Free Tier Account !		# https://aws.amazon.com/console/
		
			==> Active Email_ID 
			==> Active Mobile Number 
			==> Active Credit/Debit Card - Enabled with International Transactions 
			
	Upon Creating an Account :

	Login to AWS Console:
	
		- Email_ID 			# AWS root user ID.
		
		- Login as a root user.
	
			- EMail_ID 
			- Password 
			
		- Create MFA - Multi-Factor Authentication 
		
			- Use Mobile Number with Google Authenticator App.
			
				- Soft Token to Authenticate. 
	
	Set the Region 
	
	Explore : AWS Services 
	
	Billing Dashboard! 
	
		- Just Terminate the Resources if it is no longer required.
		
		- Just Stop the Resources if it not in use.
		
		Virtual Machine --> EC2 Instance :
		
			1 VM -> 750 Hrs/Month			# For Free Tier Account 
			
			10 VMs -> 75 Hrs/Month 		
			
		Monitor the AWS Free Tier Resource Usage & Billing :
		
		AWS Billing Dashboard 
		
			- To Monitory AWS Resource Utilization and Payments.
			
			
Next :

	- IAM Service 
	
	- EC2 Service



#######################
Day 2 : 13th July 2025
#######################

	- IAM Service :::
	
		- User Authentication
			- Defines Who can access the System/Service
		
		- User Authorization 
			- What action the User can perform on that System/Service 
			
			
	- IAM 	- Identity(Authentication)
			- Access(Authorization)
			- Management
			
			
	-> Terminologies Used to manage the Users' Access ?
	
		User_Name 
		Credentials :
			- Password				AWS Console!
			
			- Access Token/Secrets
			
			- Secure Keys
				- Public/Private Keys
			
			- Passwordless****
			
	-> RBAC - Role Based Access Control 
	
		-> Developers' Group 		==> Read access to a file.
			- user1 
			
		-> Admin Group 				==> Manage(Read/Write/Delete) the File
			- user1 
			- user2 



	- Create IAM User :
	
	- IAM Group 
	
	- Policies / Permission 
	
	- IAM Roles 
	
	- Manage IAM Users 
	
	
	
	- Install Visual Studio Code - IDE in local Machine		*******
	
		- Install JSON Extension / AWS Related Extensions.


{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "Statement1",
			"Effect": "Allow",
			"Action": [],
			"Resource": []
		}
	]
}

	Add Policies to the Users :
	
		- Through User Group 
		
		- Inline Policy 
		
	- Credential Reports :::
	
	- IAM Roles :::
	
	AKIAZzcvzxcvzxcvxcvY
	
	yPbdfxdfvxzcvHyZ0fev
	

	Various Modes of Accessing AWS :
	
		- AWS Console (Web browser)
	
		- AWS CLI 
		
		- AWS SDK 
		
		- Cloud Shell (Through Web Browser)
			
			- aws --version					# AWS Cli Command
			
			Use AWS Access Key and Secret Key.
			
			aws configure 
			
				C:\Users\Admin>aws configure
				AWS Access Key ID [****************XDWV]: ASDFfSDFASDFASDFDFASDF**FAWEFACY
				AWS Secret Access Key [****************KI5T]: yASDCASWE***DADSASDFSDAFDFSDFASDFSDFSDFv
				Default region name [ap-south-1]:
				Default output format [None]:
			
			aws iam get-user 
			
			aws iam get-user --user-name <devopsadmin1>
			
			
			
			
	
	Access AWS Resources using AWS Cli Commands:
	
		https://docs.aws.amazon.com/cli/v1/userguide/welcome-examples.html
	
		- Install AWS Client in the Local Machine(Windows/Mac/Linux).
				https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
		
		https://docs.aws.amazon.com/cli/v1/userguide/cli_iam_code_examples.html
		
		
				
		- Login to AWS Console as an IAM User 
		
		- Create Access & Secret Key 
		
		- Open Command Prompt 
		
			- aws --version 
			
			- aws configure 
	
			- aws iam get-user
			
				Exception :
				An error occurred (AccessDenied) when calling the GetUser operation: User: arn:aws:iam::682033467551:user/testuser1 is not authorized to perform: iam:GetUser on resource: user testuser1 because no identity-based policy allows the iam:GetUser action
				
			- aws iam add-user-to-group --user-name testuser1 --group-name sagrp1
			

	
	
	- EC2 Service :::
	
		EC2 - Elastic Compute Cloud Instance ==> Virtual Machine 
		
		Core Objective!
		
			#!/bin/bash
			yum update -y
			yum install -y httpd
			systemctl start httpd
			systemctl enable httpd
			echo "<h1>Hello, World!</h1>" > /var/www/html/index.html		
		
		
	
#######################
Day 3 : 19th July 2025
#######################	

		
	- EC2 Services!
	
		EC2 - Elastic Compute Cloud Instance ==> Virtual Machine 
		
		
		
		
	
	- Storage :
	
		- EBS 
		
		- EFS
		
		- S3

	- EC2 Service :::
	
		EC2 - Elastic Compute Cloud Instance ==> Virtual Machine 
		
	
	- Access EC2 Instances!
	
	
		- Login to AWS Console 
		
		- Create EC2 Instance --> Linux - Ubuntu AMI v22.04 - Enabled with port 22.
		
		- Connect to EC2 Instance :
		
			- EC2 Instance Connect 			# Using Web Browser 
			
			- Using SSH Agents :			# Windows User  
			
				- MobaXterm 				# https://mobaxterm.mobatek.net/download-home-edition.html
				- Putty 
	
			- Terminals :					# CMD Prompt/gitbash/Linux Teminal/Mac Terminal
			
					Open Terminal

					Locate your private key file. The key used to launch this instance is aws2025-keypair1.pem

					Run this command, if necessary, to ensure your key is not publicly viewable.
					chmod 400 "aws2025-keypair1.pem"

					Connect to your instance using its Public DNS:
					ec2-13-235-75-90.ap-south-1.compute.amazonaws.com
					
					ssh -i "aws2025-keypair1.pem" ec2-user@ec2-13-235-75-90.ap-south-1.compute.amazonaws.com

			
		
			SSH Connection to Remote Server :
			
				- Host Name 		# Public IP Address of EC2 Instance 
				
				- User Name			# Default User_Name : Ubuntu : ubuntu / Amazon Linux2 : ec2-user 
				
				- User Credentials 	# 
				
					Private Key ==> *.pem
		
		
		Production Envionments :
		
			- Prod Servers 
			
				--> 1,2,3,4,5		==> Elastic IP 
				
				==> www.loksai.com ==> IP Address
				
				==> Load Balancers ==> 1 - IP => 
				
						1,2,3,4,5		==> Elastic IP 
						
					Kubernetes!
						
						
	- Storage :
	
		- EBS Volumes ::: 
		
			Jenkins Servers (VM) == Periodic back-up of this server Volume ==> Snapshot. Template of EBS Volume 
			
			Build Servers 
			
			Kubernetes Cluster 
		
		Storage Administrator!
			
		
		
		- EFS :
		
			- Multi-AZs
		
		
		- AMI ==> Amazon Machine Image!	Template of the EC2 Instance 
		
			- OS,Instance Type, 
		
		
		
		- Create a VM using default AMI 		
		
		- Install all the required tools/packages in that VM
		
		- Create a New AMI using this VM 
		
		- New AMI is ready 
		
		
		-> Build Server/Environment used to build the Applications 
		
		
			Within a region :
			
			--> VM1 -> Install all the required build tools 
						-> git,maven,gradle,jdk,docker,sonarqube,
						
			--> VM2 -> Install all the required build tools 
		               -> git,.Net-SDK,docker,sonarqube,
					   
					   
			Create a AMI based on VM1 
					   
			Create a AMI based on VM2 
		
		
			- Workflow :
			
				Test the VM created using custom AMI 
				
				
			EBS Volume Encryption :
			
				Security --> 
				
					AWS - KMS
					
					During Snapshot!
					
					Encryption creates some latency!
		
Next :::		
		- S3 :::
				
	
	
	
	
	
	
	
	
	
	
	
	
		
			
