

#########################
Day 11 : 23rd August 2025
#########################
	

Fundamentals of Linux Operating System

	based on DevOps Perspective!

Overview of Linux
Linux Architecture
Linux Distributions
Basic Linux Commands
File Permission Management
User Creation
Shell Scripts
SSH and VI Utility	

	- Introduction to Linux OS ::::
	
Operating System :::

	Fundamentals of Linux Operating System 
	
		- Windows 
		- Mac 
		- Linux 
		
	Linux Operating System 
		- Open-Source 
		- Is Secured 
		- Linux OS was created based on the Unix Operating System 
		- Is an interface between the user applications and underlying Hardware.
		- Linux OS is based on the Command User Interface
		- Core of Linux OS is called kernel!
			Components of Linux OS Architecture
				- Networking 
				- Storage 
				- IPC - Inter Process Communication
				- User Management 
				- Security Management 
				- Control Groups 
				- Namespace 
				- Process 
			
		- Command Line Interface 
		
		- Linux Distributions :::
		
			- Flavors of Linux OS 
			
				- Centos / RHEL 
				- Debian / Ubuntu 
				- Fedora
				
			Package Management - Package Managers :::
				- Package Managers are used to install/Uninstall/Upgrade the Packages/software 
			
					- Centos / RHEL 		===> 	yum package Manager 
					- Debian / Ubuntu 		===>	apt/apt-get package Manager 
					- Fedora				===>	dnf (Latest Version of Fedora)
													yum (Previous Version of Fedora)
													
				- Package Managers can be executed only by the root user on Linux
				
					- To work with Package Manager :
						- Elevate the Access to Root Level 
							- sudo -i			# This Command is used to elevate the access to root level
				
	Learn Linux on DevOps Perspectives :
	
		What the Role of DevOps Team/Engineer on Linux.
		
			- All the DevOps Tools can be installed and Managed in Linux Machines 
		
		What is your role here ????
		
			- Install all the DevOps Tools 
			- Package Management - Periodically Upgrade/Uninstall - Backup of the Tools
			- Managing Remote Servers 
				- Client Server Architecture 
				- Server1 (VM)
					- Client1,2,3,4,5,6
					
			- As a DevOps Team we can Manage the Linux Machines
			
				- Package Management 
				- File Management 
				- User Management 
				- Access Management 
				- Remote Servers Management 
				- Process Automation(Shell Scripting)
					

		
#########################
Day 12 : 24th August 2025
#########################

	- As a DevOps Team we can Manage the Linux Machines
	
		- Package Management 
		- File Management 
		- User Management 
		- Access Management 
		- Remote Servers Management 
		- Process Automation(Shell Scripting)

	Working with Linux ::


		1. Create EC2 Instances (Virtual Machine)
				- Based on Linux OS Distribution
				
				- Login to AWS Console 
				- Go to EC2 Instance Dashboard 
				- Launch EC2 Instances.
				
					- Parameters to Launch AWS EC2 Instances :
						- Name/Tag
						- Choose Ubuntu v22.04 AMI 
						- t2.micro Instance Type 
						- Key-Pair 
						- No. Of Resource  = 1
						
		2. Connect to EC2 Instances (Virtual Machine)
		
			Perform SSH(Secure SHell) Connection to EC2 Instance :
			
				=> Host_Name 										# Public_IP_Address of EC2 Instance
				=> User_Name 										# ubuntu for Ubuntu Machine
				=> User Credentials	(Authentication Type)
						- Password based Authentication
						- Token Based Authentication
						- Key Based Authentication
							- SSH Keys: Private Keys & Public Keys
						- Passwordless Authentication
		
			- EC2 instance Connect Option 
			
			- SSH Agents (In Windows Machine) 
				- Putty/MobaXterm				Windows Users Install this in Local Machine
					==> https://mobaxterm.mobatek.net/download-home-edition.html
		
			- Terminal ::
				- Command Prompt / Mac Terminal
				Eg.: 
						Open Command Prompt / Mac Terminal

						Locate your private key file. The key used to launch this instance is aws2025-keypair1.pem

						Run this command, if necessary, to ensure your key is not publicly viewable.
						chmod 400 "aws2025-keypair1.pem"

						Connect to your instance using its Public DNS:
						ec2-65-0-183-132.ap-south-1.compute.amazonaws.com

						Example:

						ssh -i "aws2025-keypair1.pem" ubuntu@ec2-65-0-183-132.ap-south-1.compute.amazonaws.com		

		
		3. Login to EC2 Instances (Virtual Machine)
				
				
				
		- Basic Linux Commands 
		
			Package Manager - apt/yum/dnf ==> can be executed as a root user.
			
		- Linux Distributions 
				
			Packages can be managed based on the Distributions 
					
		- Package Management :::

			- Package Managers are used to install/Uninstall/Upgrade the Packages/software 
		
				- Centos / RHEL 		===> 	yum package Manager 
				- Debian / Ubuntu 		===>	apt/apt-get package Manager 
				- Fedora				===>	dnf (Latest Version of Fedora)
												yum (Previous Version of Fedora)
												
			- Package Managers can be executed only by the root user on Linux
			
				- To work with Package Manager :
					- Elevate the Access to Root Level 
						- sudo -i			# This Command is used to elevate the access to root level
		
			- To Install any tool/package :
			
				Install Pre-requisites	
				Install Actual Tool
				Post Installation Actions				
		
					Eg.: Tomcat :::: 
					
						Install Pre-requisites			===> jdk 
						
						Install Actual Tool				===> Installed Tomcat 
						
						Post Installation Actions		===> Started Tomcat 
		
		
			How to Install/Manage Packages ? :::
			
			- Elevate the Access to Root Level
				sudo -i 					# This Command is used to elevate the access to root level
				
			- apt update 					# Used update the default packages
			
			- apt install openjdk-17-jre -y	# Install Java Package 
			
			
			- Web Application Servers! (Tomcat(8080)/Nginx/Httpd) - enabled with Host Port.
			
			- apt install nginx -y	port 80 
			
			- nginx -version
			
			- Linux Application Service(nginx/Jenkins) 		
			
				- Start / Stop / Enable / Status / restart 
				
				systemctl status nginx 
				
				systemctl start nginx
				
				systemctl stop nginx
				
				systemctl enable nginx		# Used to define the service as as start up service
		
				systemctl disable nginx		# Used to remove the service from the start-up task list
				
				systemctl restart nginx 
				
			- apt install git				# Install git 
			
			- apt remove git 				# Uninstall git 
			
			- apt upgrade git 				# Used to upgrade git
		
		
			Package :
			
				- Stand-alone Tool			Eg.: git
				- Service					Eg.: tomcat/nginx/jenkins/docker 
		
			which nginx						# Used to get the path of installation ?
			
			which get 
			
			git --version
		

	- File Management ::::
	
			Navigate to Directories/Folders :::

				- pwd				# Get the Present Working Directory

				- cd				# Change Directory
				
				- cd <dir_name> 	# Change to a specific directory				
				
				- cd /				# This command will take to the System root directory			
			
				- cd ~				# This command will take to the home directory(Default Directory) of the specific linux user
									Eg.: 	ubuntu 	===> /home/ubuntu 
		
											root	===> /root
									
				- cd .. 			# Back to previous directory
	
				- ls 				# Is to List the files and Directories 
				
				- ll				# Long List 
	

		Create files/Directories :
		
		File Operations :
		
			- Open / Read / Delete / Update / Rename / Copy 
			
			
		File Operations :
		
			- echo "Message" 				# output statement - To print msg to terminal 
			
			- echo "Record1" > file1.txt 	# Create/update a file with record
		
			- echo "Record1" >> file1.txt 	# Add New Record to a file	
			
			- touch <file_name>				# To Create Empty file
			
			- cat <file_name>				# To read the file contents 
			
			- File Editors :
			
				- vi editor					# To Create/Open a file in interactive mode
				
				
				Eg.: 
				
					vi <file_name>			# To Create/Open a file in interactive mode
					
					
					vi sample.txt
					
					press :
					
						i 					# go to insert mode 	

						# Enter the file contents
						# Enter the file contents
						# Enter the file contents
						# Enter the file contents
					
						esc :wq				# Save and exit from file 
						
						esc :q!				# exit from file without saving the changes 
						
						
			- Rename a file/directory


						mv <existing_file_name> <New_file_Name>
						
						Eg.: 
						
						mv sample1.txt dummyfile1.txt
						
			- Delete/Remove files :
			
						rm <file_name>
						
						rm <file1_name> <file2_name>
						
						rm *.txt 
						
		Create Directories :
		
			mkdir <New_Dir_Name> 				# Make Directory 
			
			
		Copy files between the directories :
		
			cp <source_file> <Target_path>
			Eg.: 
			
			cp s1.txt /home/ubuntu/dir2
			cp /root/dir1/l1.txt /root/dir2
					
		Move files between the directories :
		
			mv <source_file> <Target_path>
			Eg.: 
			
			mv s2.txt /home/ubuntu/dir2
			mv /root/dir1/l1.txt /root/dir2


		ls 				# Get the list of files & Dirs 
		
		ls - a			# Get the list of all files & dirs(including hidden files and dirs)

		ll				# Long Listing 


	root@ip-172-31-38-191:~/dir1# ll
	total 48
	drwxr-xr-x 7 root root 4096 Aug 24 05:44 ./
	drwx------ 7 root root 4096 Aug 24 05:33 ../
	-rw-r--r-- 1 root root    7 Aug 24 05:44 .m1.txt
	drwxr-xr-x 2 root root 4096 Aug 24 05:44 .sampledir/
	-rw-r--r-- 1 root root    3 Aug 24 05:34 f1.txt
	
	-rw-r--r-- 1 root root    3 Aug 24 05:34 f2.txt
	
	drwxr-xr-x 2 root root 4096 Aug 24 05:38 f3.txt/
	drwxr-xr-x 2 root root 4096 Aug 24 05:38 s1.txt/
	drwxr-xr-x 2 root root 4096 Aug 24 05:38 s3java/
	
	drwxr-xr-x 2 root root 4096 Aug 24 05:33 sdir1/
			

		File Types :
		
			- Script 
			- Program 
			- Artifact 

		Owner 
		
		Group Users 
		
		Public Users 
		
	    drwxr-xr-x 2 root root 4096 Aug 24 05:33 sdir1/
		
		----------
		
		-									# Denote dir or file (Possible value:  d or - )
												'd'  Denotes Directory
												'-'  Denotes File 
												
												
		 ---								# Denote the Owner Level Access 
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access 
		
			---								# Denote the Group Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access

			   ---							# Denote the Public User Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access			
	
	
		https://chmod-calculator.com/
	
		chmod <Access_Level> <File/Directory_Name>
		
		chmod 600 s1.txt

		chmod 600 dir1
		
		As a best practise chmod 777 should not be used at any cause!
			
	

	- User & Access Management :::::
	
	
		Create Linux User :

		SSH Connection :	Secure SHell Connection 
		
			-> Host Name 
			-> User Name 
			-> User Authentication 


			-> Authentication Types :
			
				- Password Based Authentication
				
				- Key Based Authentication
					- Public Key 
					- Private Key 
					- authorized keys




		How to Create Linux User ?
		
			Username : devopsadmin 
			
			Bash Terminal Access :
			
			Home Dir :
			
			password :
			
			ssh-keys :



		Create Linux User with SSH Keys :::
		
			sudo -i 
			
			useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

			su - devopsadmin

			ssh-keygen -t ecdsa -b 521					#ubuntu 22.04 or higher version of ubuntu				

			cd .ssh
			
			ls ~/.ssh 

			#You should see following two files:

			#id_ecdsa - private key
			#id_ecdsa.pub - public
			
			
			cat id_ecdsa.pub > authorized_keys			# authorized_keys this file name should be same.
			
			authorized_keys :::
				It is the copy of Public Key.
				
				Always the private key will be compared with the authorized_keys
				
			chmod 600 /home/devopsadmin/.ssh/*					# Used to Change the Access Mode of Files or Directories
			
			chown -R devopsadmin:devopsadmin /opt/tomcat/		# Used to Change the Ownership of Files or Directories
			
			
		Get the List of Linux Users ::::
			cat /etc/passwd
		
		Get the list of Linux User Groups :::: 
			cat /etc/group
	
		Create Password to any Linux User:
		
			As a root user ::
			
				passwd <user_name>		
	
		Add user to a Group :
		
			usermod -aG docker devopsadmin
		
		
	
	- Remote Servers Management :::		for Client/Server Architecture.
	
		VM1 
		
		VM2 
		
		Environments :
		
			Dev Environment (VM1)
			
			Build Environment --> Application Build ==> *.war 
			 
			QA (VM1) *.war 
			
			UAT (VM1) *.war 
			
			Prod (VM1) *.war 

Use Case :

		1. Establish Connection to Remote Server  
		2. Login to the Remote Server 
		3. Copy the Files from one server to another server
			using SCP
		4. Manage the Remote Server - Install any package/Uninstall/Upgrade 
		
		Pre-requisites for Remote Server :::
		
			- Launch 2 VMs (VM1-Source & VM2-Target)
			
			- Ensure that Port 22 is enabled 
			
			- Create User in both the VMs 
			
			- Create SSH-Key in one server(VM1)
					ssh-keygen -t ecdsa -b 521
					
			- Use the public_Key as a authorized_keys in the target server(VM2)
			
			- Establish SSH Connection & Login to VM2(Target_Machine)
			
			- Copy Files from VM1 to VM2(Target_Machine)
	
		Server1 --> 
		
			-> Authentication : Tells who can access the Server 	
			
			-> Authorization : Tells what can be done on that Server
			
		Client_Machine ::::

			- Create User in both the VMs ::::
			
				useradd adminuser1 -s /bin/bash -m -d /home/adminuser1

				su - adminuser1					

			- Use the public_Key as a authorized_keys in the target server(VM2) :::

				mkdir .ssh 

				cd .ssh 


				vi authorized_keys

				#paste the id_ecdsa.pub of devopsadmin user from Server machine to authorized_keys file in Client Machine 

				chmod 600 /home/adminuser1/.ssh/*


			- Establish SSH Connection & Login to VM2(Target_Machine)

					ssh adminuser1@172.31.41.88				# Using Private IP Address
								
			- Copy Files from VM1 to VM2(Target_Machine)
			

				#cp  /home/devopsadmin/sourcefile.txt home/devopsadmin/dir1/
		
				 scp /home/devopsadmin/sourcefile.txt adminuser1@172.31.41.88:/home/adminuser1

	
	
	- Process Automation(Shell Scripting) :::::


		Pre-Requisites to work with any scripts :


		- Programming Languages 	# Develop business logic 
			- C/C++/Java/C#.Net/COBOL/RUBY/Python............

		- Scripting Languages 		# Process Automation
			- Groovy/Yaml/Shell/Python/ - Scripting
			
			
			Shell Script are collection of Linux shell Command 
			
			Fundamentals of Shell Scripting!
			
			Scripting Languages ?
				- Are used to perform some process automation/validations
				- Light-weight 
				- Eg.: java scripts / shell scripts / yaml script / groovy / python 
					(vs)
			Progamming Language ?
				- Are used to create some business applications 
				- Huge Collection of Programming components
				- Eg.: Java/.Net Framework/Python/Ruby/Cobol/C
				
			
			Shell Scripting Language :
			
				- Shell Scripting is a collection shell commands 
				- Shell Script file should be saved as *.sh (Extention should be .sh)


			vi App_build_Setup.sh
			
				sudo apt update -y
				sudo apt install git -y
				sudo apt install open-jdk11 -y
				sudo apt install docker.io -y
				sudo apt install maven -y
				
				
			save as App_build_Setup.sh

				
	Build Environment Server (VM):	To Perform Application Build - Identify the Source Code,Compile,Create Artifacts(Binaries)
	
		- Install all the required build tools : 1 Build Server ==> 50 Build Server!
		
				- apt install git -y  
				- apt install jdk -y 
				- apt install maven -y 			# Build Tool 
				- apt install docker.io -y 		# To Containerize Application
				
				
			vi javamaven-buildconfig.sh
			
				sudo apt install git -y  
	            sudo apt install jdk -y 
	            sudo apt install maven -y 		
                sudo apt install docker.io -y 	
				
				
			Test Servers :::
			
			
				- testing tools - TestNG / Selenium / jdk / docker
				
				
			Periodic Server Management :::
			
			
				- Clean-up 
				
					rm dir!
					
			Periodic Backup of Files/Directories
				

				#!/bin/bash
				sudo apt install git -y 
				sudo apt install maven -y 
				sudo apt install docker.io -y
				
				save the script as installbuildtools.sh 


				/home/devopsadmin/scripts/$ ls 
				installbuildtools.sh	
				
				chmod 700 sample1.sh

				
				/home/devopsadmin/scripts/$ ./installbuildtools.sh		# Run the Shell Script!
				
				
    1  clear
    2  apt update -y
    3  clear
    4  apt install openjdk-11
    5  apt install openjdk11
    6  clear
    7  apt install openjdk-17-jre -y
    8  apt install git
    9  clear
   10  apt install nginx
   11  nginx -version
   12  java --version
   13  clear
   14  systemcl status nginx
   15  systemctl status nginx
   16  clear
   17  systemctl stop nginx
   18  which nginx
   19  clear
   20  pwd
   21  exit
   22  cd /etc/
   23  ls
   24  pwd
   25  cd ~
   26  pwd
   27  cd /
   28  cd ~
   29  pwd
   30  cd /
   31  ls
   32  pwd
   33  clear
   34  ls
   35  cd lib
   36  ls
   37  ll
   38  clear
   39  cd ~
   40  ls
   41  cd r
   42  cd ~
   43  clear
   44  ls
   45  pwd
   46  echo "Hello"
   47  ls
   48  echo "Hello" >> file1.txt
   49  ls
   50  cat file1.txt
   51  echo "Hello1" >> file1.txt
   52  cat file1.txt
   53  touch file2.txt
   54  ls
   55  cat file2.txt
   56  clear
   57  ls
   58  echo "Hi" >> s1.txt
   59  cat s1.txt
   60  echo "Hi" >> s1.txt
   61  cat s1.txt
   62  echo "Hello" > s1.txt
   63  cat s1.txt
   64  echo "Hello Team" > s1.txt
   65  cat s1.txt
   66  clear
   67  ls
   68  vi test1.txt
   69  cat test1.txt
   70  vi test1.txt
   71  cat test1.txt
   72  clear
   73  ls
   74  cat s1.txt
   75  mv s1.txt sample1.txt
   76  ls
   77  cat sample1.txt
   78  rm file2.txt
   79  ls
   80  rm *.txt
   81  ls
   82  mkdir dir1
   83  ls
   84  mkdir dir2
   85  mkdir dir3
   86  ls
   87  cd dir1/
   88  pwd
   89  mkdir sdir1
   90  ls
   91  echo "Hi" >> f1.txt
   92  ls
   93  pwd
   94  echo "Hi" >> f2.txt
   95  echo "Hi" >> f3.txt
   96  echo "Hi" >> sdir2
   97  echo "Hi" >> sdir3
   98  clear
   99  ls
  100  cd ..
  101  ls
  102  cd dir2
  103  pwd
  104  ls
  105  cd ..
  106  cd dir1/
  107  ls
  108  cp f1.txt /root/dir2
  109  ls
  110  cd ..
  111  cd dir2/
  112  ls
  113  cd ..
  114  cd dir1/
  115  ls
  116  mv f3.txt /root/dir2
  117  ls
  118  cd ..
  119  cd dir2/
  120  ls
  121  cd ..
  122  cd dir
  123  cd dir1/
  124  clear
  125  ls
  126  mkdir f3.txt
  127  touch sdir4
  128  mkdir s1.txt
  129  mkdir s3java
  130  clear
  131  ls
  132  cat f3.txt
  133  cd sdir2
  134  clear
  135  ls
  136  ll
  137  ls -a
  138  ls
  139  mkdir .sampledir
  140  ls
  141  ls -a
  142  echo " Hello" >> .m1.txt
  143  ls
  144  ls -a
  145  ll
  146  clear
  147  ls
  148  cat f1.txt
  149  ls
  150  ll
  151  exit
  152  clear
  153  useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
  154  su - devopsadmin
  155  exit
  156  su - devopsadmin
  157  passwd devopsadmin
  158  exit
  159  clear
  160  su - devopsadmin
  161  useradd testuser
  162  su - testuser
  163  clear
  164  exit
  165  clear
  166  ls
  167  mkdir scripts
  168  cd scripts/
  169  clear
  170  sample1.sh
  171  vi sample1.sh
  172  ./sample1.sh
  173  ll
  174  chmod 700 sample1.sh
  175  lls
  176  ll
  177  ./sample1.sh
  178  history
  179  clear
  180  history

	


		
#########################
Day 13 : 30th August 2025
#########################


	Continue with Linux Shell Scripts 	


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print Hello World on terminal using echo command

Source Code:

#!/bin/bash
#
echo "Hello World"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print the calender month by default.

Source Code:

#!/bin/bash
#	     
echo "The Month is"
cal # cal command displays current month by default

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to read user input and perform operations with them.

Source Code:

#!/bin/bash
echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"










~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if condition

#Operators :: 6 Operators

Source Code:


#!/bin/bash

NUM1=5 # variabe assignment
NUM2=2

if [ $NUM1 -gt $NUM2 ] # -gt is to test integer numbers
then
    echo "NUM1 > NUM2"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if else condition

Source Code:

#!/bin/bash

NUM1=2 # Variabe assignment
NUM2=5

if [ $NUM1 -lt $NUM2 ]  # -lt is to test integer numbers
then
    echo "NUM1 < NUM2"
else
    echo "NUM1 > NUM2"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of else if condition

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

if [ $NUM -gt 0 ]
then
    echo "$NUM is +ve"
elif [ $NUM -lt 0 ]
then
    echo "$NUM is -ve"
else
    echo "$NUM is 0"
fi

echo "done"





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR							# a,e,i,o,u

case $CHAR in
	a) echo "You entered $CHAR which is a vowel";;  # ;; Terminates each option
	e) echo "You entered $CHAR which is a vowel";;
	i) echo "You entered $CHAR which is a vowel";;
	o) echo "You entered $CHAR which is a vowel";;
	u) echo "You entered $CHAR which is a vowel";;
	*) echo "You entered $CHAR which is not a vowel";; # Defaults to everything else
esac

echo "What if you enter upper case letters!!?, Check the next example"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR

case $CHAR in
	a | A) # Test for both Lower or Upper case letter
		# You may write commands in this fashion too!!, means multiline commands
		echo "You entered $CHAR which is a vowel"
		;; # Terminates each option
	e | E) 
		echo "You entered $CHAR which is a vowel"
		;;
	i | I) 
		echo "You entered $CHAR which is a vowel"
		;;
	o | O) 
		echo "You entered $CHAR which is a vowel"
		;;
	u | U) 
		echo "You entered $CHAR which is a vowel"
		;;
	*)  # Defaults to everything else
		echo "You entered $CHAR which is not a vowel"
		;;
esac



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of logical operators

Source Code:

#!/bin/bash

echo -n "Enter a NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using AND -a operator)
if [ $NUM -ge 10 -a $NUM -le 20 ]
then
    echo "$NUM is between 10 and 20"
else
    echo "$NUM is NOT between 10 and 20"
fi

echo -n "Enter another NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using OR -o operator)
if [ $NUM -lt 10 -o $NUM -gt 20 ]
then
    echo "$NUM is NOT between 10 and 20"
else
    echo "$NUM is between 10 and 20"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ Bash syntax ]

Source Code:

#!/bin/bash
#

COUNT=0

for i in 0 1 2 3 4
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done











~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ C syntax ]

Source Code:

#!/bin/bash

COUNT=0

for ((i = 0; i < 5; i++))
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

< 	Less than operator 
<=  Less than or equal



Functions/Methods :

	==> Define once and invoke many times as needed.
	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of command line arguments, Here we access positional arguments using $1, $2 …

Source Code:

vi script1.sh

#!/bin/bash

echo "Total no. of argument: $#"

echo "Program name: $0"
echo "1st argument: $1"
echo "2nd argument: $2"
echo "3rd argument: $3"

./script1.sh Hello Hai Java 

sudo apt install java -y


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Write a Shell Script to :


	- Setup the Build Server - Java Application Build using Maven	

vi java_build_Setup.sh

#!/bin/bash
#
echo "Setup the Build Server - Java Application Build using Maven"
sudo apt update -y 
sudo apt install git -y 
sudo apt install $1 -y
sudo apt install $2 -y

./java_build_Setup jdk17 maven
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	- Setup the Test Server - Test Java Web Application using Selenium
	
#!/bin/bash
#
echo "Setup the Test Server - Test Java Web Application using Selenium"
sudo apt update -y  
sudo apt install $1 -y
sudo apt install $2 -y	

./java_Test_Setup jdk17 selenium

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	- Setup the Build Server - Java Application Build using Maven and Docker	
	
vi java_dockerbuild_Setup.sh

#!/bin/bash
#
echo "Setup the Build Server - Java Application Build using Maven"
sudo apt update -y 
sudo apt install git -y 
sudo apt install $1 -y
sudo apt install $2 -y
sudo apt install $3 -y

./java_build_Setup jdk11 maven docker.io

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	- Setup the Application Web_Server and Deploy Java Application Artifacts 
	
vi java_dockerbuild_Setup.sh

#!/bin/bash
#
echo "Setup the Application Web_Server and Deploy Java Application Artifacts"
sudo apt update -y 
sudo apt install $1 -y
sudo apt install $2 -y

./java_build_Setup jdk11 tomcat	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A script to show the usage of function

Source Code:


print_hello

#!/bin/bash

# Multi-line Comment!
:'
dfsd
fs
dfsddf
s
':


# Function definition
function print_hello()
{
    	echo "====="
    	echo "Hello"
    	echo "====="
}

# Call the function - print_hello
print_hello

print_hello
print_hello
print_hello
print_hello

#print_hello


vi /etc/profile 

export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin


export MAVEN_HOME="/usr/share/maven"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$MAVEN_HOME/bin

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

https://tomcat.apache.org/


# Pre-Requisites ::::

sudo -i
apt update -y
apt-get install default-jdk -y
java --version

# Tomcat Installation & Setup :::


cd /opt/
wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz
tar -xvzf /opt/apache-tomcat-8.5.99.tar.gz
mv apache-tomcat-8.5.99 tomcat

cd tomcat/bin/
./startup.sh

A script to demostrate usage of sed command

Source Code:

#!/bin/bash

# Basic text substitution using sed
echo "Bash Scripting Bash Language" | sed 's/Bash/Perl/'







