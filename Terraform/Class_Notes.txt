
#########################
Day 21 : 28th Sep. 2025
#########################
	
	- Terraform 
	
	- Continuous Monitoring Tool: Prometheus &  Grafana 
	

	Infra-Structure Provisioning using Terraform :::
	
	- IAC - Infra-Structure As Code Tools ::
		
		- Terraform/CF/ARM
		- Ansible/Chef/Puppet		
		
	- Server Provisioning/Creation 		--> Terraform/CF/ARM	
	
Terraform :::

	- Is a IAC Tool - Used to Provision the Infra-Structure
	
	- Terraform uses HCL - Hashi-Corp Declarative Language (JSON file format)
	
	- Terraform Working Model 
	
		--> Identify the Scope of the Infra-Structure (AWS/Azure)
		
		--> Write the Terraform Script 
		
		--> Perform Terraform Init 	- Initialize the Terraform Providers 	
									- To Download Terraform Provider to Terraform Project
		
		--> Perform Terraform Plan - Preview the Terraform Script 
		
		--> Perform Terraform Apply - To Implement the actual Changes to the target infra-structure
		
		
	Working with Terraform :::
	
		- Install Terraform 		--> Local Windows Machine / Linux Machine 
		
				https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
				
				https://developer.hashicorp.com/terraform/install
				

				Using Manual Approach - Install Terraform on local windows machine 
				
					- Download Windows AMD64 Version Terraform -- zipfile 
						- Right Click and Extract all 
							- Get the Extracted Terraform Folder 
								- Get the terraform - binary file 
								
					- Setup Environment Variable for terraform binary file 
						- from windows start menu, search for enviroment variable 
							- click of edit enviroment variable setting 
								- find system properties dialog 
									- select enviroment variables button
										- On Environment Variables Dialog 
											- goto to System Variable 
												- Select path variable and edit 
													- Click on New 
														- add C:\Softwares\terraform_1.7.2_windows_amd64
															- apply the changes and close the settings
				
		- Install Visual Studio Code 	- IDE used to create Terraform Projects 
			
				https://code.visualstudio.com/download
				
		
		- Open Visual Studio Code - Create Terraform Project 		
				
					On Visual Studio Code : Install Terraform Extension for Visual Studio Code 
			
						HashiCorp Terraform
		
		
		- Create AWS Access Key and Secret Keys
		
				Access Key: AG
	
				Secret Key: 8
				
				
		- Create a Terraform Script: 
		
			- Define Provider with AccessKey & SecretKey
			
			- Define the AWS Resources 
			
			
		- Using Terraform :::
		
			- Create/Add Resource 		=======>			+
			
			- Modify/Alter				=======>			~
			
			- Delete/Destroy			=======>			-			
			
	
		- Terraform State File :::
		
			- Used to maintain the current state of real infra-structure.
			
			- Terraform always compare the configuration with the state file during terraform plan/apply.
			
			
		terraform --version 
		
		terraform init

		terraform plan

		terraform apply

		terraform destroy

		terraform apply -auto-approve

		terraform destroy -auto-approve		


#aws.tf 			
			
provider "aws" {
    region = "ap-south-1"
    access_key = "AG"
    secret_key = "8Pzg"  
}

resource "aws_instance" "sadai-instance1" {
  ami = "ami-02d26659fd82cf299"
  instance_type = "t2.micro"
  key_name = "aws2025-keypair1"

  tags = {
    Name="SA-DAI-Dummy"   
  }
}




# awsinfra.tf


provider "aws" {
    region = "ap-south-1"
    access_key = "G"
    secret_key = "8kczg"  
}

# Create VPC

resource "aws_vpc" "myvpc9" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myvpc9"
  }
}

# Create Subnet 

resource "aws_subnet" "mysubnet9" {
  vpc_id     = aws_vpc.myvpc9.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "mysubnet9"
  }
}

# Internet Gateway

resource "aws_internet_gateway" "mygw9" {
  vpc_id = aws_vpc.myvpc9.id

  tags = {
    Name = "mygw9"
  }
}

# Route Table

resource "aws_route_table" "myrt9" {
  vpc_id = aws_vpc.myvpc9.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.mygw9.id
  }

  tags = {
    Name = "myrt9"
  }
}

# Route Table Association

resource "aws_route_table_association" "myrta9" {
  subnet_id      = aws_subnet.mysubnet9.id
  route_table_id = aws_route_table.myrt9.id
}

# Security Groups

resource "aws_security_group" "mysg9" {
  name        = "mysg9"
  description = "Allow inbound traffic"
  vpc_id      = aws_vpc.myvpc9.id

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "mysg9"
  }
}

# Create Instance

resource "aws_instance" "instance9" {
  ami           = "ami-02d26659fd82cf299"
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id = aws_subnet.mysubnet9.id
  vpc_security_group_ids = [aws_security_group.mysg9.id]
  key_name = "aws2025-keypair1"

  tags = {
    Name = "SA-DAI-Dummy_Server0"
  }
}
